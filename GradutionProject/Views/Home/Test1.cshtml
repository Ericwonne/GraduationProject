<link href="https://cdn.bootcss.com/bootstrap/3.1.1/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.bootcss.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>


<div class="container">
    <form class="form-horizontal">
        <div class="form-group has-feedback">
            <input id="txt1" type="text" class="form-control hasclear" placeholder="Textbox 1">
            <span class="clearer glyphicon glyphicon-remove-circle form-control-feedback" onclick="clearText()"></span>
        </div>
    </form>
</div>

<div>
    Here:
    <p id="showDate"></p>
</div>

<div class="container-fluid">
    <div class="row-fluid">
        <div class="span6">
            <p class="text-success">
                <em>Git</em>是一个分布式的版本控制系统，最初由<strong>Linus Torvalds</strong>编写，用作Linux内核代码的管理。在推出后，Git在其它项目中也取得了很大成功，尤其是在Ruby社区中。
            </p>
        </div>
        <div class="span6">
            <p>
                <em>Git</em>是一个分布式的版本控制系统，最初由<strong>Linus Torvalds</strong>编写，用作Linux内核代码的管理。在推出后，Git在其它项目中也取得了很大成功，尤其是在Ruby社区中。
            </p>
        </div>
    </div>
</div>

<small><i class="glyphicon glyphicon-asterisk" style="color:red"></i></small>
<small><i class="glyphicon glyphicon-asterisk" style="color:blue"></i></small>

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Bootstrap 实例 - 带有下拉菜单的标签页</title>
    <link rel="stylesheet" href="http://cdn.static.runoob.com/libs/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="http://cdn.static.runoob.com/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="http://cdn.static.runoob.com/libs/bootstrap/3.3.7/js/bootstrap.min.js"></script>
</head>
<body>

    <p>带有下拉菜单的标签页</p>




</body>
</html>






<script src="https://cdn.bootcss.com/jquery/1.10.1/jquery.min.js"></script>

<script>
    //$(".hasclear").keyup(function () {
    //    var t = $(this);
    //    t.next('span').toggle(Boolean(t.val()));
    //});

    //$(".clearer").hide($(this).prev('input').val());

    //$(".clearer").click(function () {
    //    $(this).prev('input').val('').focus();
    //    $(this).hide();
    //});

    function clearText() {
        document.getElementById("txt1").value = "";
    }
</script>

<script>
    function getSt(year, month, day) {

        var curDate = new Date();
        curDate.getTime();
        var beginDate = new Date(year, month, day, 0, 0, 0);
        return Math.ceil((curDate - beginDate) / (1000 * 60 * 60 * 24 * 7));

    }
    function show1() {
        var xn = "2017-2018";
        var xq = 2;
        var StartWeek = 1;
        var result = xn + "学年 第" + xq + "学期 本科教学第" + getSt(2018, 2, 5) + "周";
        return result;
    }

    calendar = new Date();
    day = calendar.getDay();
    month = calendar.getMonth();
    date = calendar.getDate();
    year = calendar.getYear();
    if (year < 200) year = 1900 + year;
    cent = parseInt(year / 100);
    g = year % 19;
    k = parseInt((cent - 17) / 25);
    i = (cent - parseInt(cent / 4) - parseInt((cent - k) / 3) + 19 * g + 15) % 30;
    i = i - parseInt(i / 28) * (1 - parseInt(i / 28) * parseInt(29 / (i + 1)) * parseInt((21 - g) / 11));
    j = (year + parseInt(year / 4) + i + 2 - cent + parseInt(cent / 4)) % 7;
    l = i - j;
    emonth = 3 + parseInt((l + 40) / 44);
    edate = l + 28 - 31 * parseInt((emonth / 4));
    emonth--;

    var dayname = new Array("星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六");
    var monthname =
        new Array("1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月");

    var a = year + "年" + monthname[month] + date + "日" + dayname[day] + " " + " （" + show1() + " ）";
    document.getElementById("showDate").innerHTML = a;
    //    document.write(a);
</script>

<script>
    //let Dictionary = (function () {
    //    const items = {};
    //    class Dictionary {
    //        constructor() {
    //        }
    //        set(key, value) {//向字典中添加新的元素
    //            items[key] = value;
    //        }
    //        delete(key) {//删除字典中某个指定元素
    //            if (this.has(key)) {
    //                delete items[key];
    //                return true;
    //            }
    //            return false;
    //        }
    //        has(key) {//如果某个键值存在于这个字典中，则返回true，否则返回false
    //            return items.hasOwnProperty(key);
    //        }
    //        get(key) {//通过键值查找特定的数值并返回。
    //            return this.has(key) ? items[key] : undefined;
    //        };
    //        clear() {//将这个字典中的所有元素全部删除。
    //            items = {};
    //        }
    //        size() {//返回字典所包含元素的数量。
    //            return Object.keys(items).length;
    //        }
    //        keys() {//将字典所包含的所有键名以数组形式返回。
    //            return Object.keys(items);
    //        }
    //        values() {//将字典所包含的所有数值以数组形式返回。
    //            var values = [];
    //            for (var k in items) {
    //                if (this.has(k)) {
    //                    values.push(items[k]);
    //                }
    //            }
    //            return values;
    //        }
    //        each(fn) {//遍历每个元素并且执行方法
    //            for (var k in items) {
    //                if (this.has(k)) {
    //                    fn(k, items[k]);
    //                }
    //            }
    //        }
    //        getItems() {//返回字典
    //            return items;
    //        }
    //    }
    //    return Dictionary;
    //})();
    //var Period = new Dictionary();
    //var weekc = new Array("周一", "周二", "周三", "周四", "周五", "周六", "周日");    //week chinese version
    //var week = new Array("A", "B", "C", "D", "E", "F", "G");
    //var periodc = new Array("1,2节", "3,4节", "3,4,5节", "6,7节", "8,9节", "10~12节");    //period chinese version
    //var period = new Array("A", "B", "C", "D", "E", "F");
    //for (var i = 0; i < period.length; i++) {
    //    for (var j = 0; j < week.length; j++) {
    //        Period.set(week[j] + period[i], weekc[j] + periodc[i]);
    //    }
    //}
</script>